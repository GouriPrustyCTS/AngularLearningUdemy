* tsconfig.json - main tsconfig file -  The main, base configuration for your entire TypeScript 
project, defining general compiler options and project files.

* tsconfig.app.json - configure app compilation - Extends tsconfig.json, adding or overriding settings 
specifically for your main application's source code.

* tsconfig.spec.json - for test specification - Extends tsconfig.json, adding or overriding settings
specifically for your test files (e.g., unit tests, integration tests).
 
* angular.json is the configuration file for your Angular workspace and projects
tells the Angular CLI how to build, serve, test, and manage your Angular applications and libraries.

These files are used to configure the TypeScript compiler (tsc) and define how your 
TypeScript code should be compiled into JavaScript

_____________________________________________________Angular Essentials(Basics)_________________


Creating Components:

String Interpolation ({{ }}):
The simplest way to display data from your component's TypeScript class in its HTML template. This is immediate feedback for component creation.

Property Binding ([]):
How you pass data from a component's TypeScript class to an HTML element's property (e.g., [src], [alt], [value]). Crucial for dynamic content.

Attribute Binding (attr.):
A less common but important distinction from property binding, used for binding to actual HTML attributes that don't have corresponding DOM properties (e.g., [attr.aria-label]). Introduce this after property binding to highlight the difference.

Event Binding (()):
How you listen for events (like click, input, submit) on HTML elements and execute methods in your component's TypeScript class. This introduces interactivity.

Directives (Introduction):
Give a high-level overview. Explain that directives are classes that add extra behavior to elements. Then immediately differentiate:


Structural Directives (*ngIf, *ngFor):

Conditional Rendering (*ngIf and ng-template): Essential for showing/hiding elements based on conditions. ng-template naturally comes up here as the underlying mechanism for structural directives.
Looping (*ngFor): Iterating over collections to render lists of items.

Attribute Directives ([ngClass], [ngStyle]):
Dynamic CSS with Class Bindings ([ngClass]): How to dynamically add/remove CSS classes.
Dynamic CSS with Style Bindings ([ngStyle]): How to dynamically apply inline styles.



Component Communication & Data Flow

Binding and Passing Data to Child Components (@Input()):
Now that you know basic property binding, extend it to custom component properties. Explain how @Input() works to receive data from a parent.

Event Binding, Emitting, and Capturing (@Output(), EventEmitter):
Complementing @Input(), this covers how child components send data or notify parent components about events using @Output() and EventEmitter. This completes the parent-child communication loop.
Forms & User Input

Two-Way Data Binding ([(ngModel)]):
Introduce [(ngModel)] as a convenient way to achieve both property and event binding for form inputs, enabling automatic synchronization between the input and the component's property.

FormsModule:
Explain that [(ngModel)] requires importing FormsModule. This is a practical dependency.

ngSubmit():
How to handle form submissions in Angular, typically used on the <form> tag.
Advanced TypeScript & Component Features

name!: string vs name?: string (! vs ?):
This fits well here as you're now dealing with properties in classes and the implications of strict type checking, especially in component properties. Explain optional properties vs. definite assignment assertion.

Getter and Setter in Class Component:
Show how to use getters and setters for computed properties or to react to property changes within your component class, which can be useful for inputs or internal state.

ng-content - as a wrapper:
Explain content projection, allowing components to accept and render content passed to them from their parent. This is key for creating flexible and reusable wrapper components.

Pipes for Transforming Data:
Introduce pipes as a way to transform data for display in templates (e.g., date, currency, uppercase).
Services & Dependency Injection (Application Logic)

Service Layer Creation:
Explain the concept of services for housing reusable business logic, data fetching, or shared state, promoting separation of concerns.

Dependency Injection:
Crucial for Angular. Explain how services are provided and injected into components (and other services) to make them available where needed. This is a core Angular pattern.




Modern Angular Features (Signals Era)

Signals (input(), output(), inject()):
This is a newer, more reactive way of handling data flow in Angular, especially for component inputs and outputs, and for injecting dependencies without traditional constructors. These are cutting-edge and worth learning after the traditional methods.


Data Persistence

Local Storage:
A practical topic for simple client-side data persistence. Show how to interact with localStorage to store and retrieve data.
